import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from api_client import MedicalAPIClient

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
API_BASE_URL = os.getenv('API_BASE_URL')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
api_client = MedicalAPIClient(API_BASE_URL)

class LoginState(StatesGroup):
    waiting_for_credentials = State()

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë®‚öïÔ∏è –í—Ä–∞—á–∏", callback_data="doctors")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∏", callback_data="appointments")],
        [InlineKeyboardButton(text="üîê –í–æ–π—Ç–∏", callback_data="login")]
    ])
    
    await message.answer(
        "üè• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "doctors")
async def doctors_handler(callback: types.CallbackQuery):
    if not api_client.token:
        await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏'")
        return
        
    doctors = await api_client.get_doctors()
    if doctors:
        text = "üë®‚öïÔ∏è –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π:\n\n"
        for doctor in doctors:
            text += f"‚Ä¢ {doctor.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {doctor.get('specialization', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
    
    await callback.message.edit_text(text)
    await callback.answer()

@dp.callback_query(F.data == "appointments")
async def appointments_handler(callback: types.CallbackQuery):
    if not api_client.token:
        await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏'")
        return
        
    appointments = await api_client.get_appointments()
    if appointments:
        text = "üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º:\n\n"
        for apt in appointments:
            text += f"‚Ä¢ {apt.get('patient_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {apt.get('appointment_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
    
    await callback.message.edit_text(text)
    await callback.answer()

@dp.callback_query(F.data == "login")
async def login_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nemail password")
    await state.set_state(LoginState.waiting_for_credentials)
    await callback.answer()

@dp.message(LoginState.waiting_for_credentials)
async def process_login(message: types.Message, state: FSMContext):
    try:
        email, password = message.text.split(' ', 1)
        success = await api_client.login(email, password)
        if success:
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: email password")
    
    await state.clear()

async def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())